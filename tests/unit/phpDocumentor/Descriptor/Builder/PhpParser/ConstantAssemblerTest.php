<?php
/**
 * phpDocumentor
 *
 * PHP Version 5.3
 *
 * @copyright 2010-2014 Mike van Riel / Naenius (http://www.naenius.com)
 * @license   http://www.opensource.org/licenses/mit-license.php MIT
 * @link      http://phpdoc.org
 */

namespace phpDocumentor\Descriptor\Builder\PhpParser;

use Mockery as m;
use phpDocumentor\Descriptor\Analyzer;
use phpDocumentor\Reflection\DocBlock;
use PhpParser\Node\Const_;
use PhpParser\Node\Name;

class ConstantAssemblerTest extends \PHPUnit_Framework_TestCase
{
    const EXAMPLE_NAME      = 'CONSTANT';
    const EXAMPLE_VALUE     = 'TEST_VALUE';
    const EXAMPLE_NAMESPACE = 'My\Space';
    const EXAMPLE_LINE      = 10;
    const EXAMPLE_DOCBLOCK  = <<<DOCBLOCK
/**
 * This is a Summary.
 * This is a description
 * @var string This is a tag
 */
DOCBLOCK;
    const EXAMPLE_SUMMARY = 'This is a Summary.';
    const EXAMPLE_DESCRIPTION = 'This is a description';

    /** @var ConstantAssembler */
    private $fixture;

    /** @var Analyzer|m\MockInterface */
    private $analyzerMock;

    /**
     * Creates the fixture and its dependencies.
     */
    protected function setUp()
    {
        $this->analyzerMock = m::mock('phpDocumentor\Descriptor\Analyzer');

        $this->fixture = new ConstantAssembler();
        $this->fixture->setAnalyzer($this->analyzerMock);
    }

    /**
     * @covers phpDocumentor\Descriptor\Builder\PhpParser\ConstantAssembler::create
     * @covers phpDocumentor\Descriptor\Builder\PhpParser\ConstantAssembler::extractNamespace
     */
    public function testAssembleAConstantDescriptor()
    {
        list($docBlock, $varTagMock) = $this->givenADocBlockWithVarTag();

        $constant = $this->givenAnExampleConstantNode($docBlock);

        $qsen = self::EXAMPLE_NAMESPACE . '\\' . self::EXAMPLE_NAME;

        $descriptor = $this->fixture->create($constant);

        $this->assertSame(self::EXAMPLE_NAME, $descriptor->getName());
        $this->assertSame(self::EXAMPLE_VALUE, $descriptor->getValue());
        $this->assertSame('\\' . $qsen, (string)$descriptor->getFqsen());
    }

    /**
     * Creates and returns a new Constant Node as is generated by PHP-Parser.
     *
     * @param DocBlock $docBlock
     *
     * @return Const_
     */
    private function givenAnExampleConstantNode(DocBlock $docBlock)
    {
        $constant = new Const_(self::EXAMPLE_NAME, new \PhpParser\Node\Scalar\String_(self::EXAMPLE_VALUE));
        $constant->namespacedName = new Name(self::EXAMPLE_NAMESPACE . '\\' . self::EXAMPLE_NAME);
        $constant->setLine(self::EXAMPLE_LINE);
        $constant->docBlock = $docBlock;

        return $constant;
    }

    /**
     * Returns a DocBlock with a mocked @var tag.
     *
     * @return array A DocBlock object and a mocked VarTag object
     */
    private function givenADocBlockWithVarTag()
    {
        $docBlock = new DocBlock(self::EXAMPLE_DOCBLOCK);
        $varTagMock = m::mock('phpDocumentor\Descriptor\Tag\VarDescriptor');
        $this->analyzerMock->shouldReceive('analyze')
            ->with(m::type('phpDocumentor\Reflection\DocBlock\Tag\VarTag'))
            ->andReturn($varTagMock);

        return array($docBlock, $varTagMock);
    }
}